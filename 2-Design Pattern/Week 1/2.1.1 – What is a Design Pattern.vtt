WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:41.212 --> 00:00:44.909
Hello and welcome to the second
course in the Software Design and

3
00:00:44.909 --> 00:00:46.836
Architecture Specialization.

4
00:00:46.836 --> 00:00:50.993
Brought to you in partnership by
the University of Alberta and Coursera.

5
00:00:50.993 --> 00:00:54.770
In this course,
we'll be exploring design patterns.

6
00:00:54.770 --> 00:00:58.170
If you're joining us for the first time,
you may want to consider visiting our

7
00:00:58.170 --> 00:01:01.120
first course in specialization
on Object-Oriented Design.

8
00:01:02.210 --> 00:01:05.418
Although, if you're just interested
in learning about design patterns,

9
00:01:05.418 --> 00:01:07.732
all of our courses stand
alone as individual courses.

10
00:01:09.748 --> 00:01:13.543
This course It's just like
the others in our specialization,

11
00:01:13.543 --> 00:01:17.849
consists of four modules with the first
three focusing on the content.

12
00:01:17.849 --> 00:01:21.095
You will complete assignments for the
capstone project throughout the course,

13
00:01:21.095 --> 00:01:23.540
but the rest of the work will
take place in the fourth module.

14
00:01:24.790 --> 00:01:27.220
So what are we going to
cover in these modules?

15
00:01:27.220 --> 00:01:30.350
What's next in your journey
to designing it right?

16
00:01:30.350 --> 00:01:31.440
What is a design pattern?

17
00:01:32.900 --> 00:01:34.000
Well, design problems and

18
00:01:34.000 --> 00:01:38.130
application can be resolved through design
patterns commonly applied by experts.

19
00:01:39.560 --> 00:01:41.805
In this course you will
extend your knowledge of

20
00:01:41.805 --> 00:01:43.510
Object-Oriented Analysis Design,

21
00:01:43.510 --> 00:01:47.480
by learning how to apply design patterns
to addressing these design issues.

22
00:01:48.750 --> 00:01:52.200
Though a survey of established design
patterns you will gain a foundation for

23
00:01:52.200 --> 00:01:53.699
more complex software applications.

24
00:01:55.770 --> 00:02:00.840
You'll also several design principles
to make a more reusable, flexible,

25
00:02:00.840 --> 00:02:01.550
and maintainable.

26
00:02:03.090 --> 00:02:06.290
Finally, we'll teach how to
identify bad software designs by

27
00:02:06.290 --> 00:02:07.840
referencing a catalog code smell.

28
00:02:09.650 --> 00:02:12.330
When you reach the capstone
in this course,

29
00:02:12.330 --> 00:02:14.190
you'll get to apply your
newly acquired knowledge.

30
00:02:15.290 --> 00:02:20.040
You'll be challenged to critique an
existing job application for code smells.

31
00:02:20.040 --> 00:02:22.680
You'll also get
the opportunity to redesign

32
00:02:22.680 --> 00:02:24.870
the application to apply to side parents.

33
00:02:26.930 --> 00:02:30.070
For the first module,
we'll be teaching you about creational and

34
00:02:30.070 --> 00:02:31.640
structural design patterns.

35
00:02:31.640 --> 00:02:34.450
So let's begin.

36
00:02:34.450 --> 00:02:35.635
>> In software engineering,

37
00:02:35.635 --> 00:02:39.150
you will often come across the same
design problem many times.

38
00:02:39.150 --> 00:02:42.650
There are so many ways to deal with these
recurring problems but over time some

39
00:02:42.650 --> 00:02:46.430
solutions are preferred over others,
because they're more flexible or reusable.

40
00:02:46.430 --> 00:02:50.670
A design pattern is a practical proven
solution to a recurring design problem.

41
00:02:50.670 --> 00:02:53.940
Instead of solving a particular software
problem by basic objectory into

42
00:02:53.940 --> 00:02:56.040
programming principles every time,

43
00:02:56.040 --> 00:02:58.190
where you would have to
decide what objects to use?

44
00:02:58.190 --> 00:03:00.410
How objects need to relate and so on?

45
00:03:00.410 --> 00:03:03.764
You can use previously outlined solutions
that expert developers have often used.

46
00:03:04.785 --> 00:03:08.925
These design solutions are not theoretical
proposals of only academic interest.

47
00:03:08.925 --> 00:03:12.315
These are actual solutions that
are used in industrial software.

48
00:03:12.315 --> 00:03:15.315
Think of design pattens like the way
you would think of recipes in cooking.

49
00:03:15.315 --> 00:03:17.535
There are some dishes that people
have experimented with and

50
00:03:17.535 --> 00:03:19.445
cooked over and over again.

51
00:03:19.445 --> 00:03:22.655
After a while, a certain way of cooking
a particular dish would be preferred

52
00:03:22.655 --> 00:03:25.225
because it creates the best tasting dish.

53
00:03:25.225 --> 00:03:25.815
Over the years,

54
00:03:25.815 --> 00:03:29.110
developers have experimented with
many different design solutions.

55
00:03:29.110 --> 00:03:31.700
And these design patterns outline
solutions that often create

56
00:03:31.700 --> 00:03:33.420
the best outcome.

57
00:03:33.420 --> 00:03:37.700
There are 23 design patterns identified
in a famous book called Design Patterns,

58
00:03:37.700 --> 00:03:40.230
Elements of
Reusable Object-Oriented Software.

59
00:03:40.230 --> 00:03:43.030
By authors Gamma, Helm,
Johnson, and Vlissides.

60
00:03:43.030 --> 00:03:47.122
This course will go through
a selection of these patterns.

61
00:03:47.122 --> 00:03:50.486
However, it's important to note that it
won't be so simple to look at a software

62
00:03:50.486 --> 00:03:53.850
design problem and automatically
know which design pattern to use.

63
00:03:53.850 --> 00:03:55.710
There are many design
patterns available and

64
00:03:55.710 --> 00:03:58.480
sometimes one particular design
pattern may seem applicable,

65
00:03:58.480 --> 00:04:01.830
but it may not actually be the right
fit to the problem at hand.

66
00:04:01.830 --> 00:04:04.730
Using design patterns is sort
of like playing a game of chess.

67
00:04:04.730 --> 00:04:07.610
There are many ways to win by
putting your opponent in checkmate.

68
00:04:07.610 --> 00:04:10.880
A beginner chess player may only
know the basic moves of each piece.

69
00:04:10.880 --> 00:04:14.316
Whereas an expert chess player will look
for appropriate patterns on the board.

70
00:04:14.316 --> 00:04:17.364
There are established chess
patterns called the exposed king or

71
00:04:17.364 --> 00:04:19.007
the isolated pawn, for example.

72
00:04:19.007 --> 00:04:22.765
And these are patterns that experts will
look to exploit while playing the game.

73
00:04:22.765 --> 00:04:26.085
Through experience, they are better
able to judge which patterns to use or

74
00:04:26.085 --> 00:04:29.055
create in a particular
situation to win the game.

75
00:04:29.055 --> 00:04:32.555
Similar to chess, beginner software
developers might only know the elements of

76
00:04:32.555 --> 00:04:34.990
language syntax in programming software.

77
00:04:34.990 --> 00:04:38.560
They know elements like how to create
a for loop, a method, and so on.

78
00:04:38.560 --> 00:04:42.040
But with more practice and experience,
these software developers will write more

79
00:04:42.040 --> 00:04:44.880
idiomatic code that follows
common conventions.

80
00:04:44.880 --> 00:04:47.780
Also, they can become design experts
who know the design patterns to

81
00:04:47.780 --> 00:04:50.110
use in solving particular
software design problems.

82
00:04:52.180 --> 00:04:54.690
Another thing to note about
design patterns is that it's

83
00:04:54.690 --> 00:04:57.630
not just a concrete set of source
code that you memorize and

84
00:04:57.630 --> 00:05:01.090
put into your software,
like Java libraries or frameworks.

85
00:05:01.090 --> 00:05:03.960
Design patterns are a bit more conceptual.

86
00:05:03.960 --> 00:05:06.560
It is knowledge that you can apply
within your software design to

87
00:05:06.560 --> 00:05:09.129
guide its structure, and
make it more flexible and reuseable.

88
00:05:10.250 --> 00:05:12.640
So, why should you use design patterns?

89
00:05:12.640 --> 00:05:14.700
Design patterns help
software developers so

90
00:05:14.700 --> 00:05:17.160
that instead of building
everything from scratch,

91
00:05:17.160 --> 00:05:21.500
they have a guide that helps them solve
design problems in the way experts do.

92
00:05:21.500 --> 00:05:23.700
A beginner athlete may have
the natural talent and

93
00:05:23.700 --> 00:05:25.560
basic knowledge of the sport they playing.

94
00:05:25.560 --> 00:05:28.460
But a couch with years of experience
will be able to help that athlete

95
00:05:28.460 --> 00:05:31.690
to become better and use their
talent to achieve greater things.

96
00:05:31.690 --> 00:05:34.260
Design patterns are already
proven by experts, and

97
00:05:34.260 --> 00:05:35.680
they've gone through the hardships.

98
00:05:35.680 --> 00:05:37.730
You can skip the trials they've
already gone through, and

99
00:05:37.730 --> 00:05:39.910
just to straight to creating
better written software.

100
00:05:41.480 --> 00:05:45.190
Finally, design patterns help
to create a design vocabulary.

101
00:05:45.190 --> 00:05:48.930
Rather than having to explain the details
of a design solution over, and over again,

102
00:05:48.930 --> 00:05:52.800
you can simplify the discussion by
having a suggestive word to describe it.

103
00:05:52.800 --> 00:05:55.740
For example, there's a very
common design problem in software

104
00:05:55.740 --> 00:05:59.260
where you have two objects and the first
object depends on the second object.

105
00:05:59.260 --> 00:06:02.460
If the second object changes,
the first object should be notified.

106
00:06:02.460 --> 00:06:05.260
This is a situation that
occurs often in software and

107
00:06:05.260 --> 00:06:08.050
we take some time during
the discussion to describe a solution

108
00:06:08.050 --> 00:06:11.600
involving super classes or
interphases and certain methods.

109
00:06:11.600 --> 00:06:15.100
Design patterns help to address issue
by giving each pattern a name and

110
00:06:15.100 --> 00:06:17.920
making it easier for
developers to communicate.

111
00:06:17.920 --> 00:06:21.870
Instead, you can simply say we'll
use an observer design pattern here.

112
00:06:21.870 --> 00:06:24.830
Prior knowledge of this particular
pattern outlines a solution and

113
00:06:24.830 --> 00:06:26.840
clarifies the original situation.

114
00:06:26.840 --> 00:06:29.790
So the discussion can
focus on other issues.

115
00:06:29.790 --> 00:06:33.340
Knowledge of design patterns leaves
less room for misunderstanding.

116
00:06:33.340 --> 00:06:36.350
My description of this situation and
solution could've been vague.

117
00:06:36.350 --> 00:06:39.000
And you could've misunderstood
the design to be implemented.

118
00:06:39.000 --> 00:06:41.444
If I simply say,
this is an observer pattern,

119
00:06:41.444 --> 00:06:43.902
we both know exactly
what we're discussing.

120
00:06:43.902 --> 00:06:46.580
You will learn many design
patterns throughout this course.

121
00:06:46.580 --> 00:06:49.790
You will learn what to look for,
and how to use each design pattern.

122
00:06:49.790 --> 00:06:53.600
Design patterns are important techniques
to use and learn as you design software.

123
00:06:53.600 --> 00:06:55.500
So now it's time to start
designing like an expert.